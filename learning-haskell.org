#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: learning haskell
#+date: <2021-11-06 sÃ¡b>
#+author: Adair Neto
#+email: adair@arch
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.4.6)

* Learning Haskell

Testing the Notebook:
#+begin_src haskell
putStrLn "Hello, world!"
#+end_src

** Conditionals

If must always have an else.

Instead of If-Else, we can use Guardaded Equations:
#+begin_src haskell
abs n | n >= 0    = n
      | otherwise = -n
#+end_src

Wildcard Pattern: `n` means 'anything'.

** List Patterns

"Cons", "(:)", is an operator that constructs a list.
#+begin_src haskell
head :: [a] -> a
head (x:_) = x
  
tail :: [a] -> [a]
tail (_:xs) = xs
#+end_src

** Lambda Expressions

#+begin_src haskell
\x -> x + x
#+end_src

Can be used to understand *currying*.

For example, instead of writing:
#+begin_src haskell
add :: Int -> Int -> Int
add x y = x + y
#+end_src

We can write:
#+begin_src haskell
add :: Int -> (Int -> Int)
add = \x -> (\y -> x + y)
#+end_src

It's a good practice to use lambda expressions for functions that only appear once.
#+begin_src haskell
odds n = map f [0..n-1]
         where
           f x = x*2 + 1
#+end_src
where `map` applies the function across all the list.

Instead of that
#+begin_src haskell
odds n = map (\x -> x*2 + 1) [0..n-1]
#+end_src

Also, we can create *operators sections*:
#+begin_src haskell
(1+) 2
(1/) 2
(*2) 2
(/2) 2
#+end_src

** List Comprehension

Takes all xs from 1 to 5 and square them.
#+begin_src haskell
[x^2 | x <- [1..5]]
#+end_src

The expression `[1..5]` is called a *generator*.

Cartesian product between $\{1,2,3\}$ and $\{4,5\}$:
#+begin_src haskell
[(x,y) | y <- [4,5], x <- [1,2,3]]
#+end_src

We can use *guards* to restrict the values (like a 'such that').

Example: factors of an integer.
#+begin_src haskell
factors :: Int -> [Int]  
factors n = [x | x <- [1..n], n `mod` x == 0]
#+end_src

Which we can use to check if a number is prime.
#+begin_src haskell
prime :: Int -> Bool
prime n = factors n == [1,n]
#+end_src

And then find the first n primes.
#+begin_src haskell
primes :: Int -> [Int]
prime n = [x | x <- [2..n], prime x]
#+end_src

** Zip Function

#+begin_src haskell
zip :: [a] -> [b] -> [(a,b)]
  
pairs :: [a] -> [(a,a)]
pairs xs = zip xs (tail xs)  
    
sorted :: Ord a => [a] -> Bool
sorted xs = and [x <= y | (x,y) <- pairs xs]

positions :: Eq a => a -> [a] -> [Int]
positions x xs = [i | (x',i) <- zip xs [0..], x == x']
#+end_src

** String Comprehensions
  
#+begin_src haskell
count :: Char -> String -> Int
count x xs = length [x' | x' <- xs, x == x']
#+end_src

Scalar product:
#+begin_src haskell
sp :: [Int] -> [Int] -> Int
sp xs ys = sum [xs !! i * ys !! i | i <- [0..n-1]]
             where n = length xs
  
sp xs ys = sum [x * y | (x,y) <- zip xs ys]    
#+end_src

* Recursive Functions

Simple definition of factorial:
#+begin_src haskell
fac :: Int -> Int
fac n = product [1..n]
#+end_src

Recursively, we define a *base case* and a *recursive case*.
#+begin_src haskell
fac 0 = 1 
fac n = n * fac (n-1)
#+end_src

** Recursion on Lists

#+begin_src haskell
product :: Num a => [a] -> a
product []     = 1
product (n:ns) = n * product ns
#+end_src

#+begin_src haskell
length :: [a] -> Int
length []     = 0
length (_:xs) = 1 + length xs
#+end_src

#+begin_src haskell
reverse :: [a] -> [a]
reverse []     = []
reverse (x:xs) = reverse xs ++ [x]
#+end_src

** Multiple Arguments

#+begin_src haskell
zip :: [a] -> [b] -> [(a,b)]
zip []     _      = []
zip _      []     = []
zip (x:xs) (y:ys) = (x,y) : zip xs ys
#+end_src

** Quicksort

#+begin_src haskell
qsort :: Ord a => [a] -> [a]
qsort []     = []  
qsort (x:xs) =
  qsort smaller ++ [x] ++ qsort larger
  where
    smaller = [a | a <- xs, a <= x]
    larger  = [b | b <- xs, b > x]
#+end_src

* Higher-Order Functions

*Definition:* Takes a function as an argument or returns a function as a result.
E.g.
#+begin_src haskell
twice :: (a -> a) -> a -> a
twice f x = f (f x)
#+end_src

** The Map Function

Applies a function to every element of a list.
#+begin_src haskell
map :: (a -> b) -> [a] -> [b]
map f xs = [f x | x <- xs]
#+end_src

** The Filter Function
Selects every element from a list that satisfies a predicate.
#+begin_src haskell
filter :: (a -> Bool) -> [a] -> [a]
filter p xs = [x | x <- xs, p x]
#+end_src

Another way of defining it:
#+begin_src haskell
filter p [] = []
filter p (x:xs)
  | p x       = x : filter p xs
  | otherwise = filter p xs
#+end_src

** The Foldr Function
Stands for folding for the right. Can define a number of functions.
#+begin_src haskell
f [] = v
f (x:xs) = x `oplus` f xs
#+end_src
f maps the empty list to a given value v, and any non-empty list to some arbitrary function `oplus`applied to its head and f of its tail.

Example:
#+begin_src haskell
sum []     = 0
sum (x:xs) = x + sum xs
#+end_src

Foldr encapsulates this pattern of recursion, give a function `oplus` and value v as arguments.
Example:
#+begin_src haskell
sum = foldr (+) 0
#+end_src

#+begin_src haskell
or = foldr (||) False
and = foldr (&&) True
#+end_src

*Definition (Foldr).*
#+begin_src haskell
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f v []     = v
foldr f v (x:xs) = f x (foldr f v xs)
#+end_src

Can be thought non-recursively by replacing ":" by a given function and "[]" by a given value.
For example:
#+begin_src haskell
sum [1,2,3] = foldr (+) 0 [1,2,3] = foldr (+) (1:(2:(3:[])))
            = 1+(2+(3+0)) -- replace each (:) by (+) and [] by 0  
#+end_src  
    
More examples:
#+begin_src haskell
length = foldr (\_ n -> 1+n) 0
reverse = foldr (\x xs -> xs ++ [x]) []  
(++ ys) = foldr (:) ys    
#+end_src

Foldr simplifies the process of writing recursive functions on lists. The properties can be proved using algebraic properties, such as *fusion* and *banana split* rule.

** Other Library Functions
*Function composition:*
#+begin_src haskell
(.) :: (b -> c) -> (a -> b) -> (a -> c)
f . g = \x -> f (g x)    
#+end_src

*All:* Every element of a list satisfies a given predicate.
*Any:* Any element of a list satisfies a given predicate.
#+begin_src haskell
all :: (a -> Bool) -> [a] -> Bool
all p xs = and [p x | x <- xs]

any :: (a -> Bool) -> [a] -> Bool
any p xs = or [p x | x <- xs]
any (== ' ') "abc def" -- checks if there's any whitespace in the string.
#+end_src

*takeWhile:* takes an element of a list while the predicate is satisfied.
#+begin_src haskell
takeWhile :: (a -> Bool) -> [a] -> [a]
takeWhile p [] = []
takeWhile p (x:xs)
  | p x       = x : takeWhile p xs
  | otherwise = []
takeWhile (/=  ' ') "abc def" -- returns "abc"
#+end_src

*dropWhile:* drops elements while the predicate is satisfied.
#+begin_src haskell
dropWhile :: (a -> Bool) -> [a] -> [a]
dropWhile p [] = []
dropWhile p (x:xs)
  | p x        = dropWhile p xs
  | otherwhise = x:xs
dropWhile (== ' ') "   abc" -- returns "abc"
#+end_src

Example: express `[f x | x <- xs, p x]` using map and filter.
#+begin_src haskell
map f (filter p xs)
#+end_src

* How To Think Recursively

Seven Steps:
1. Name the function
2. Write down its type #
3. Enumerate the cases #
4. Define the simple cases
5. List the "ingredients": what is available to solve the recursive case? 
6. Define the other cases
7. Think about the result: can it be generalized? #

Drops the first n elements of a list:
#+begin_src haskell
drop :: Int -> [a] -> [a]
drop 0 xs     = xs
drop _ []     = []
drop n (_:xs) = drop (n-1) xs
#+end_src

Removes the last element from a non-empty list:
#+begin_src haskell
init :: [a] -> [a]
init (x:xs) | null xs   = []
            | otherwise = x : init xs
#+end_src

#+begin_src haskell
init :: [a] -> [a]
init [_]    = []
init (x:xs) = x : init xs
#+end_src

* Types and Classes

*What is a type?*

A name or a collection of related values, e.g. `bool`.

If evaluating an expression `e` would produce a value of type `t`, then e has type t, denoted `e :: t`.

Every well formed expression has a type, which is calculated using *type inference*.

All type errors are found at compile time (strongly typed language): safer and faster.

Tuples: list of elements of possibly different types. The type of a tuple says the length of the tuple.

Lists: list of elements of the same type. Doesn't say anything about its length.

A *function* is a mapping from values of one type to values of another type. E.g. `f : a -> b`.

** Curried Functions

E.g.

#+begin_src haskell
  add' :: Int -> (Int -> Int)
  add' x y = x+y
#+end_src

Here the second argument is taken by returning a function as result.

Conventions:

1. The arrow associates to the right.

2. Function application associates to the left.

** Polymorphic Function

If the type contains one or more type variables.

E.g. `length :: [a] -> Int`.

** Overloaded Functions

If its type contains one or more class contraints.

E.g. `(+) :: Num a => a -> a -> a`.

I.e., `a` must be a numeric type.

Main type classes: `Num`, `Eq`, `Ord`.

** Tips:

- Begin a function by writing its type.

- State the type of every new function defined.

- When defined polymorphic functions that use numbers, equality or orderings, include the necessary class constraints.

* Declaring Types and Classes

** Type Declarations

Define functions, but declare types.
   
#+begin_src haskell
type String = [Char]
#+end_src

For example:

#+begin_src haskell
type Pos = (Int,Int)
origin :: Pos
origin = (0,0)

left :: Pos -> Pos 
left (x,y) = (x-1,y)
#+end_src

Can be nested, but cannot be recursive.

** Data Declaration

Is a completely new type.
   
#+begin_src haskell
data Bool = False | True
#+end_src

Here, False and True are *constructors* for the type Bool.
Type and constructor names must always begin with an upper-case letter.
Values of new types can be used like built in types.
Constructors can have parameters.

#+begin_src haskell
data Shape = Circle Float
           | Rect Float Float

square :: Float -> Shape
square n = Rect n n

area :: Shape -> Float
area (Circle r) = pi * r^2
area (Rect x y) = x * y
#+end_src

Here, the Circle and Shape constructors are functions that build values of the type Shape.

Data declarations can have parameters too.

#+begin_src haskell
data Maybe a = Nothing | Just a

safediv :: Int -> Int -> Maybe Int
safediv _ 0 = Nothing
safediv m n = Just (m `div` n)

safehead :: [a] -> Maybe a
safehead [] = Nothing
safehead xs = Just (head xs)
#+end_src

*Maybe* is a safe way to define functions.

New types can be declared recursively.

#+begin_src haskell
data Nat = Zero | Succ Nat

nat2int :: Nat -> Int
nat2int Zero     = 0
nat2int (Succ n) = 1 + nat2int n

int2nat :: Int -> Nat
int2nat 0 = Zero
int2nat n = Succ (int2nat (n-1))

add Zero     n = n
add (Succ m) n = Succ (add m n)
#+end_src

** Tree-like Data Types

#+begin_src haskell
data Expr = Val Int
          | Add Expr Expr
          | Mul Expr Expr

Add (Val 1) (Mul (Val 2) (Val 3))

size :: Expr -> Int
size (Val n)   = 1
size (Add x y) = size x + size y
size (Mul x y) = size x + size y

eval :: Expr -> Int
eval (Val n)   = n
eval (Add x y) = eval x + eval y
eval (Mul x y) = eval x * eval y
#+end_src

#+begin_src haskell
eval = folde id (+) (*)
#+end_src

#+begin_src haskell
mult :: Nat -> Nat -> Nat
mult Zero     m = Zero
mult (Succ n) m = add (mult n m) m

data Tree a = Leaf a
            | Node (Tree a) (Tree a)
#+end_src

* Countdown Problem

Given six natural numbers, you can use four operations to find a given number.

#+begin_src haskell
-- CODE FROM GRAHAM HUTTON: http://www.cs.nott.ac.uk/~pszgmh/pgp-countdown.hs

import System.IO
import System.CPUTime
import Numeric

-- Arithmetic operators

data Op = Add | Sub | Mul | Div

instance Show Op where
   show Add = "+"
   show Sub = "-"
   show Mul = "*"
   show Div = "/"

valid :: Op -> Int -> Int -> Bool
valid Add _ _ = True
valid Sub x y = x > y
valid Mul _ _ = True
valid Div x y = x `mod` y == 0

apply :: Op -> Int -> Int -> Int
apply Add x y = x + y
apply Sub x y = x - y
apply Mul x y = x * y
apply Div x y = x `div` y

-- Numeric expressions

data Expr = Val Int | App Op Expr Expr

instance Show Expr where
   show (Val n)     = show n
   show (App o l r) = brak l ++ show o ++ brak r
                      where
                         brak (Val n) = show n
                         brak e       = "(" ++ show e ++ ")"

values :: Expr -> [Int]
values (Val n)     = [n]
values (App _ l r) = values l ++ values r

eval :: Expr -> [Int]
eval (Val n)     = [n | n > 0]
eval (App o l r) = [apply o x y | x <- eval l,
                                  y <- eval r,
                                  valid o x y]

-- Combinatorial functions

subs :: [a] -> [[a]]
subs []     = [[]]
subs (x:xs) = yss ++ map (x:) yss
              where yss = subs xs

interleave :: a -> [a] -> [[a]]
interleave x []     = [[x]]
interleave x (y:ys) = (x:y:ys) : map (y:) (interleave x ys)

perms :: [a] -> [[a]]
perms []     = [[]]
perms (x:xs) = concat (map (interleave x) (perms xs))

choices :: [a] -> [[a]]
choices = concat . map perms . subs

-- Formalising the problem

solution :: Expr -> [Int] -> Int -> Bool
solution e ns n = elem (values e) (choices ns) && eval e == [n]

-- Brute force solution

split :: [a] -> [([a],[a])]
split []     = []
split [_]    = []
split (x:xs) = ([x],xs) : [(x:ls,rs) | (ls,rs) <- split xs]

exprs :: [Int] -> [Expr]
exprs []  = []
exprs [n] = [Val n]
exprs ns  = [e | (ls,rs) <- split ns,
                 l       <- exprs ls,
                 r       <- exprs rs,
                 e       <- combine l r]

combine :: Expr -> Expr -> [Expr]
combine l r = [App o l r | o <- ops]

ops :: [Op]
ops = [Add,Sub,Mul,Div]

solutions :: [Int] -> Int -> [Expr]
solutions ns n = [e | ns' <- choices ns, e <- exprs ns', eval e == [n]]

-- Combining generation and evaluation

type Result = (Expr,Int)

results :: [Int] -> [Result]
results []  = []
results [n] = [(Val n,n) | n > 0]
results ns  = [res | (ls,rs) <- split ns,
                      lx     <- results ls,
                      ry     <- results rs,
                      res    <- combine' lx ry]

combine' :: Result -> Result -> [Result]
combine' (l,x) (r,y) = [(App o l r, apply o x y) | o <- ops, valid o x y]

solutions' :: [Int] -> Int -> [Expr]
solutions' ns n = [e | ns' <- choices ns, (e,m) <- results ns', m == n]

-- Exploiting algebraic properties

valid' :: Op -> Int -> Int -> Bool
valid' Add x y = x <= y
valid' Sub x y = x > y
valid' Mul x y = x /= 1 && y /= 1 && x <= y
valid' Div x y = y /= 1 && x `mod` y == 0

results' :: [Int] -> [Result]
results' []  = []
results' [n] = [(Val n,n) | n > 0]
results' ns  = [res | (ls,rs) <- split ns,
                       lx     <- results' ls,
                       ry     <- results' rs,
                       res    <- combine'' lx ry]

combine'' :: Result -> Result -> [Result]
combine'' (l,x) (r,y) = [(App o l r, apply o x y) | o <- ops, valid' o x y]

solutions'' :: [Int] -> Int -> [Expr]
solutions'' ns n = [e | ns' <- choices ns, (e,m) <- results' ns', m == n]

-- Performance testing

showtime :: Integer -> String
showtime t = showFFloat (Just 3) (fromIntegral t / (10^12)) " seconds"

display :: [Expr] -> IO ()
display es = do t0 <- getCPUTime
                if null es then
                   do t1 <- getCPUTime
                      putStr "\nThere are no solutions, verified in "
                      putStr (showtime (t1 - t0))
                      putStr ".\n\n"
                else
                   do t1 <- getCPUTime
                      putStr "\nOne possible solution is "
                      putStr (show (head es))
                      putStr ", found in "
                      putStr (showtime (t1 - t0))
                      putStr "\n\nPress return to continue searching..."
                      getLine
                      putStr "\n"
                      t2 <- getCPUTime
                      if null (tail es) then
                         putStr "There are no more solutions"
                      else
                         do sequence [print e | e <- tail es]
                            putStr "\nThere were "
                            putStr (show (length es))
                            putStr " solutions in total, found in "
                            t3 <- getCPUTime
                            putStr (showtime ((t1 - t0) + (t3 - t2)))
                            putStr ".\n\n"
  
main :: IO ()
main =  do hSetBuffering stdout NoBuffering
           putStrLn "\nCOUNTDOWN NUMBERS GAME SOLVER"
           putStrLn "-----------------------------\n"
           putStr "Enter the given numbers : "
           ns <- readLn
           putStr "Enter the target number : "
           n  <- readLn
           display (solutions'' ns n)
#+end_src

* Interactive Programming

`IO Char` returns a character while `IO ()` returns no result value.

** Basic library actions:

`getChar :: IO Char`: Reads a character, prints it and returns the character
`putChar :: Char -> IO ()`: Echoes the character.
`return :: a -> IO a`: simply returns the value.

** Sequencing

Uses the keyword `do` to combine a sequence of actions.

#+begin_src haskell
act :: IO (Char,Char)
act = do x <- getChar
         getChar
         y <- getChar
         return (x,y)

getLine :: IO String
getLine = do x <- getChar
             if x == '\n' then
                return []
             else
               do xs <- getLine
                  return (x:xs)

putStr :: String -> IO ()
putStr []     = return ()
putStr (x:xs) = do putChar x
                   putStr xs

putStrLn :: String -> IO ()
putStrLn xs = do putStr xs
                 putChar '\n'
                   
strlen :: IO ()
strlen = do putStr "Enter a string: "
            xs <- getLine
            putStr "The string has "
            putStr (show (length xs))
            putStrLn " characters"
#+end_src

`show` transforms the value into a string in order to print it. 

** Hangman

#+begin_src haskell
import System.IO

getCh :: IO Char
getCh = do hSetEcho stdin False
           x <- getChar
           hSetEcho stdin True
           return x

sgetLine :: IO String
sgetLine = do x <- getCh
              if x == '\n' then
                 do putChar x
                    return []
              else
                 do putChar '-'
                    xs <- sgetLine
                    return (x:xs)

match :: String -> String -> String
match xs ys =
  [if elem x ys then x else '-' | x <- xs]
                    
play :: String -> IO ()
play word =
  do putStr "? "
     guess <- getLine
     if guess == word then
        putStrLn "You got it!"
     else
        do putStrLn (match word guess)
           play word
                    
hangman :: IO ()
hangman = do PutStrLn "Think of a word: "
             word <- sgetLine
             putStrLn "Try to guess it:"
             play word
#+end_src

* Lazy Evaluation

- Avoids unnecessary evaluation.
- Supports infinite lists.
- Allows programs to be more modular: separates control and data.
- Ensures termination whenever possible.

Outermost evaluation may give a result when innermost result fails. E.g. `fst(0,infinity)`.
Caveat: outermost takes more steps to reduce.
How to avoid it? Use pointers to indicate sharing of arguments.

Lazy evaluation = outermost evaluation + sharing of arguments.

** Generating Primes (Sieve of Eratosthenes)

Steps:
1. Write down the infinite sequence 2,3,4...
2. Mark the first number p as being prime
3. Delete all multiples of p from the list
4. Return to step 2

#+begin_src haskell
primes = sieve [2..]
sieve (p:xs) = p : sieve [x | x <- xs, mod x p /= 0]
#+end_src 

#+begin_src haskell
twin (x,y) = y == x+2
twins = filter twin (zip primes (tail primes))
#+end_src

* Key Concepts

Saying *what* to compute, rather than *how*.

#+begin_src haskell
sum . map (^2) . filter even
#+end_src

Pure vs. impure code.

*Equational reasoning:* `map f . map g = map (f . g)`

Drawbacks:
- Difficult to reason about efficiency.
- Limite tool support for developers.
- Requires ability to think abstractly.

* Sudoku

#+begin_src haskell

  -- Basic Declarations

  type Grid     = Matrix Value
  type Matrix a = [Row a]
  type Row a    = [a]
  type Value    = Char

  blank :: Grid
  blank = replicate 9 (replicate 9 '.')

  -- Is this grid valid?

  rows :: Matrix a -> [Row a]
  rows = id

  cols :: Matrix a -> [Row a]
  cols = transpose

  boxs :: Matrix a -> [Row a]
  boxs = unpack . map cols . pack
         where
           pack   = split . map split
           split  = chop boxsize
           unpack = map concat. concat

  chop :: Int -> [a] -> [[a]]
  chop n [] = []
  chop n xs = take n xs : chop n (drop n xs)

  valid :: Grid -> Bool
  valid g = all nodups (rows g) &&
            all nodups (cols g) &&
            all nodups (boxs g)

  nodups :: Eq a => [a] -> Bool
  nodups []     = True
  nodups (x:xs) = not (elem x xs) && nodups xs

  -- A basic solver

  solve :: Grid -> [Grid]
  solve = filter valid . collapse . choices

  -- Takes each blank cell and fills it with every possible solution

  type Choices = [Value]

  choices :: Grid -> Matrix Choices
  choices g = map (map choice) g
              where
                choice v = if v == '.' then
                              ['1'..'9']
                           else
                              [v]

  -- Cartesian Product
  cp :: [[a]] -> [[a]]
  cp []       = [[]]
  cp (xs:xss) = [y:ys | y <- xs, ys <- cp xss]

  -- Takes all possible values
  collapse :: Matrix [a] -> [Matrix a]
  collapse m = cp (map cp m)

  -- Pruning the search space

  prune :: Matrix Choices -> Matrix Choices
  prune = pruneBy boxs . pruneBy cols . pruneBy rows
          where pruneBy f = f . map reduce . f


  reduce :: Row Choices -> Row Choices
  reduce xs = [xs `minus` singles | xs <- xss]
              where singles = concat (filter single xss)

  minus :: Choices -> Choices -> Choices
  xs `minus` ys = if single xs then xs else xs \\ ys

  solve2 = filter valid . collapse . prune . choices

  solve3 = filter valid . collapse . fix prune . choices

  fix :: Eq a => (a -> a) -> a -> a
  fix f x = if x == x' then x else if fix f x'
            where x' = f x

  -- Blocked matrices

  void :: Matrix Choices -> Bool
  void m = any (any null) m

  safe :: Matrix Choices -> Bool
  safe m = all consistent (rows m) &&
           all consistent (cols m) &&
           all consistent (boxs m)

  consistent :: Row Choices -> Bool
  consistent = nodups . concat . filter single

  -- Either has empty cells or duplicated single cells
  blocked :: Matrix Choices -> Bool
  blocked m = void m || not (safe m)

  solve4 = search . prune . choices

  search :: Matrix Choices -> [Grid]
  search m | blocked m          = []
           | all (all single) m = collapse m
           | otherwise          = [g | m' <- expand m, g  <- search (prune m')]

  single :: [a] -> Bool
  single [_] = True
  single _   = False

  expand :: Matrix Choices -> [Matrix Choices]
  expand m              =
     [rows1 ++ [row1 ++ [c] : row2] ++ rows2 | c <- cs]
     where
        (rows1,row:rows2) = break (any (not . single)) m
        (row1,cs:row2)    = break (not . single) row

  main :: IO ()
  main = putStrLn (unlines (head (solve4 easy)))

#+end_src

* Connect Four Game

** The board

#+begin_src haskell

  rows = 6
  cols = 7
  win = 4
  depth = 6

  type Board  = [Row]
  type Row    = [Player]
  data Player = O | B | X
                deriving (Ord, Eq, Show)

#+end_src

*Types* are collections of related values.
*Classes* are collections of related types.

`deriving Eq` is equivalent to:

#+begin_src haskell
  instance Eq Player where
    O == O = True
    B == B = True
    X == X = True
    _ == _ = False
  #+end_src

`Ord` states that O $\leq$ B $\leq$ X. Also, it's possible to return the maximum and the minimum.

`Show` allows printing.

** Minimax Algorithm

1. Produce the game tree to a given depth.
   
2. Label each leaf with winner or B if not over or draw.
   
3. Work up the tree.
   
  3.1 If O to play, take minimum of the children (O < B < X).
  
  3.2 If X to play, take maximum of the children (O < B < X).
  
4. Best move is one with the same label as the root.

* Functors

** Programming with effects

Shall we be pure or impure?

*Pure*: programs are mathematical functions. No interaction with the outside world.

*Impure*: programs can have side effects.

Can we combine the benefits of the two approaches? Yes, with *Monads*!

** Abstracting programming patterns

Consider the following example:

#+begin_src haskell

  inc :: [Int] -> [Int]
  inc []     = []
  inc (n:ns) = n+1 : inc ns

  sqr :: [Int] -> [Int]
  sqr []     = []
  sqr (n:ns) = n^2 : sqr ns
    
#+end_src

We're using the same programming pattern in both cases! Processing the first case and the recursively processing the rest of the list.

This pattern is captured by the higher-order function `map`:

#+begin_src haskell
  map :: (a -> b) -> [a] -> [b]
  map f []     = []
  map f (x:xs) = f x : map f xs

  inc = map (+1)
  sqr = map (^2)
#+end_src

Generalizing further, we can map over other data structures using `functor`:

#+begin_src haskell
  class Functor f where
    fmap :: (a -> b) -> f a -> f b
#+end_src

`f` must be a parametrized type, like trees or lists.

Example: The *list* functor.

#+begin_src haskell
  instance Functor [] where
    -- fmap :: (a -> b) -> [a] -> [b]
    fmap = map
#+end_src

Here `[]` is the parametrized type of lists.

It's not possible to declare the types in instances.

Example: The *maybe* functor.

#+begin_src haskell

  -- Parametrized type
  data Maybe a = Nothing | Just a

  instance Functor Maybe where
    -- fmap :: (a -> b) -> Maybe a -> Maybe b
    fmap g Nothing  = Nothing
    fmap g (Just x) = Just (g x)

#+end_src

Example: The *tree* functor.

#+begin_src haskell

  data Tree a = Leaf a
              | Node (Tree a) (Tree a)

  instance Functor Tree where
    -- fmap :: (a -> b) -> Tree a -> Tree b
    fmap g (Leaf x)   = Leaf (g x)
    fmap g (Node l r) = Node (fmap g l) (fmap g r)

  fmap length (Leaf "abc") -- evaluates to Leaf 3
  fmap even (Node (Leaf 1) (Leaf 2)) -- evaluates to (Node (Leaf False) (Leaf True))

#+end_src

** Why use functors?

1. We can use the same name, `fmap`, for functions that are essentially the same.

2. Define generic functions that work for any functorial type.

#+begin_src haskell
  inc :: Functor f => f Int -> f Int
  inc = fmap (+1)
#+end_src

* Applicative Functors

Generalizing `fmap` for functions of several variables.

#+begin_src haskell
  class Functor2 f where
    fmap2 :: (a -> b -> c) -> f a -> f b -> f c

  -- Instead of manually defining as above, we can use the following functions:
  pure :: a -> f a
  (<*>) :: f (a -> b) -> f a -> f b

  -- Applicative style:
  pure g <*> x <*> y <*> z

  fmap0 :: a -> f a
  fmap0 = pure

  fmap1 :: (a -> b) -> f a -> f b
  fmap1 g x = pure g <*> x

  fmap2 :: (a -> b -> c) -> f a -> f b -> f c
  fmap2 g x y = pure g <*> x <*> y
#+end_src

*Applicative Functor* is a functor that supports the pure and star operations.

*Star* is a generalized form os function application.

#+begin_src haskell
  class Functor f => Applicative f where
    pure  :: a -> f a
    (<*>) :: f (a -> b) -> f a -> f b
#+end_src

Some examples:

#+begin_src haskell
  -- Maybe

  instance Applicative Maybe where
    -- pure :: a -> Maybe a
    pure x = Just x
    -- (<*>) :: Maybe (a -> b) -> Maybe a -> Maybe b
    Nothing <*> mx     = Nothing
    (Just g) <*> mx    = fmap g mx

  pure (+1) <*> (Just 1)             -- returns (Just 2)
  pure (+) <*> (Just 1) <*> (Just 2) -- returns (Just 3)
  pure (+) <*> Nothing <*> (Just 2)  -- returns Nothing

  -- Lists

  instance Applicative [] where
    -- pure :: a -> [a]
    pure x = [x]
    -- (<*>) :: [a -> b] -> [a] -> [b]
    gs <*> xs = [g x | g <- gs, x <- xs]

  pure (+1) <*> [1,2,3]        -- returns [2,3,4]
  pure (+) <*> [1] <*> [2]     -- returns [3]
  pure (*) <*> [1,2] <*> [3,4] -- returns [3,4,6,8]
#+end_src

* Monads

Consider this simple evaluator:

#+begin_src haskell
  data Expr = Val Int | Div Expr Expr

  eval :: Expr -> Int
  eval (Val n)   = n
  eval (Div x y) = eval x `div` eval y

  -- What if y is 0?

  safediv :: Int -> Int -> Maybe Int
  safediv _ 0 = Nothing
  safediv n m = Just (n `div` m)

  eval :: Expr -> Maybe Int
  eval (Val n)   = Just n
  eval (Div x y) = case eval x of
                     Nothing -> Nothing
                     Just n  -> case eval y of
                       Nothing -> Nothing
                       Just m  -> safediv n m

  -- How can we simplify this?

  eval :: Expr -> Maybe Int
  eval (Val n)   = pure n
  eval (Div x y) = pure safediv <*> eval x <*> eval y -- doesn't work: type error
#+end_src

Common pattern: we have a case analysis. If we have Nothing, return Nothing. Otherwise, process it. This happens twice.

We define the operator `>>=` ('bind', 'into', 'then') as:

#+begin_src haskell
  mx >>= f = case mx of
               Nothing -> Nothing
               Just x  -> f x

  (>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b

  eval :: Expr -> Maybe Int
  eval (Val n)   = Just n
  eval (Div x y) = eval x >>= (\n ->
                   eval y >>= (\m ->
                   safediv n m))
#+end_src

*Do notation* gets expanded to a series of bind operations and a function at the end.

The `eval` above is exactly the same as:

#+begin_src haskell
  eval :: Expr -> Maybe Int
  eval (Val n)   = Just n
  eval (Div x y) = do n <- eval x
                      m <- eval y
                      safediv n m
#+end_src
